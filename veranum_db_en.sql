DROP DATABASE IF EXISTS veranum_db;
CREATE DATABASE veranum_db CHARACTER SET utf8 COLLATE utf8_bin;

USE veranum_db;

DROP TABLE IF EXISTS V_USER;
CREATE TABLE V_USER -- V_USER = Veranum user
(
    V_USER_RUN         VARCHAR(15) PRIMARY KEY,
    V_USER_DV          VARCHAR(1) NOT NULL,
    V_USER_FIRSTNAME   VARCHAR(80) NOT NULL,
    V_USER_LASTNAME    VARCHAR(80) DEFAULT NULL,
    V_USER_EMAIL       VARCHAR(300) NOT NULL,
    V_USER_TYPE        INT NOT NULL,       -- 1: FUNCTIONARY .- 2: CLIENT .- 3: PROVIDER
    V_USER_PHONE       VARCHAR(18) DEFAULT NULL
);
-- SUBMODULE CLIENT
DROP TABLE IF EXISTS MENU;
CREATE TABLE MENU
(
    MENU_ID             INT PRIMARY KEY AUTO_INCREMENT,
    MENU_DATE           DATE NOT NULL
);
DROP TABLE IF EXISTS MEAL;
CREATE TABLE MEAL
(
    MEAL_ID           INT PRIMARY KEY AUTO_INCREMENT,
    MEAL_NAME         VARCHAR(200) NOT NULL,
    MEAL_DESCRYPTION  VARCHAR(500) NOT NULL,
    MEAL_TYPE         INT NOT NULL,       -- 1: BREAKFAST .- 2: LUNCH .- 3: NIGHT TEA .- 4: DINNER
    MEAL_PRICE        INT NOT NULL,
    MEAL_MENU_ID      INT NOT NULL
);
DROP TABLE IF EXISTS INPUT_MEAL;
CREATE TABLE INPUT_MEAL
(
    INPUT_MEAL_ID         INT PRIMARY KEY AUTO_INCREMENT,
    INPUT_MEAL_MEAL_ID    INT NOT NULL,
    INPUT_MEAL_STOCK_CODE INT NOT NULL
);
DROP TABLE IF EXISTS RESERVATION;
CREATE TABLE RESERVATION
(
    RESERVATION_ID          INT PRIMARY KEY AUTO_INCREMENT,
    RESERVATION_COMMENSALS  INT NOT NULL,
    RESERVATION_DATE        DATE NOT NULL,
    RESERVATION_HOUR        TIME NOT NULL,
    RESERVATION_CLIENT_RUN  VARCHAR(15) NOT NULL
);
DROP TABLE IF EXISTS MEAL_RESERVATION;
CREATE TABLE MEAL_RESERVATION
(
    MEAL_RESERVATION_ID             INT PRIMARY KEY AUTO_INCREMENT,
    MEAL_RESERVATION_QUANTITY       INT NOT NULL,
    MEAL_RESERVATION_RESERVATION_ID INT NOT NULL,
    MEAL_RESERVATION_MEAL_ID        INT NOT NULL
);
-- END SUBMODULE CLIENT
--
-- SUBMODULE INPUTS
DROP TABLE IF EXISTS ORDER;
CREATE TABLE ORDER
(
    ORDER_ID              INT PRIMARY KEY AUTO_INCREMENT,
    ORDER_SUBTOTAL        INT NOT NULL,
    ORDER_FUNCTIONARY_RUN VARCHAR(15) NOT NULL
);
DROP TABLE IF EXISTS INPUT_ORDER;
CREATE TABLE INPUT_ORDER
(
    INPUT_ORDER_ID           INT PRIMARY KEY AUTO_INCREMENT,
    INPUT_ORDER_QUANTITY     INT NOT NULL,
    INPUT_ORDER_PRICE        INT NOT NULL,
    INPUT_ORDER_ORDER_ID     INT NOT NULL,
    INPUT_ORDER_STOCK_ID     INT NOT NULL
);
-- END SUBMODULE INPUTS
--
DROP TABLE IF EXISTS STOCK;
CREATE TABLE STOCK
(
    STOCK_ID                  INT PRIMARY KEY AUTO_INCREMENT,
    STOCK_CODE                INT NOT NULL,
    STOCK_NAME                VARCHAR(60) NOT NULL,
    STOCK_QUANTITY_AVAILABLE  INT NOT NULL,
    STOCK_MEAL_ID             INT NOT NULL 
);

-- TABLE MODIFICATION
ALTER TABLE MEAL                                                   ADD CONSTRAINT                    MEAL_MENU_ID_FK 
    FOREIGN KEY MEAL (MEAL_MENU_ID)                                REFERENCES                        MENU (MENU_ID);
ALTER TABLE RESERVATION                                            ADD CONSTRAINT          RESERVATION_CLIENT_RUN_FK 
    FOREIGN KEY RESERVATION (RESERVATION_CLIENT_RUN)               REFERENCES                   V_USER (V_USER_RUN);
ALTER TABLE MEAL_RESERVATION                                       ADD CONSTRAINT MEAL_RESERVATION_RESERVATION_ID_FK 
    FOREIGN KEY MEAL_RESERVATION (MEAL_RESERVATION_RESERVATION_ID) REFERENCES          RESERVATION (RESERVATION_ID);
ALTER TABLE MEAL_RESERVATION                                       ADD CONSTRAINT        MEAL_RESERVATION_MEAL_ID_FK 
    FOREIGN KEY MEAL_RESERVATION (MEAL_RESERVATION_MEAL_ID)        REFERENCES                        MEAL (MEAL_ID);
ALTER TABLE INPUT_MEAL                                             ADD CONSTRAINT              INPUT_MEAL_MEAL_ID_FK
    FOREIGN KEY INPUT_MEAL (INPUT_MEAL_MEAL_ID)                    REFERENCES                        MEAL (MEAL_ID);  
ALTER TABLE ORDER                                                  ADD CONSTRAINT            ORDER_FUNCTIONARY_ID_FK 
    FOREIGN KEY ORDER (ORDER_FUNCTIONARY_RUN)                      REFERENCES                   V_USER (V_USER_RUN);
ALTER TABLE INPUT_ORDER                                            ADD CONSTRAINT            INPUT_ORDER_ORDER_ID_FK 
    FOREIGN KEY INPUT_ORDER (INPUT_ORDER_ORDER_ID)                 REFERENCES                      ORDER (ORDER_ID);
ALTER TABLE STOCK                                                  ADD CONSTRAINT                   STOCK_MEAL_ID_FK 
    FOREIGN KEY STOCK (STOCK_MEAL_ID)                              REFERENCES                        MEAL (MEAL_ID);